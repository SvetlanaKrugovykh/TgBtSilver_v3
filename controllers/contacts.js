const { TelegramClient } = require('telegram')
const { StringSession } = require('telegram/sessions')
require('dotenv').config()
const inputLineScene = require('./inputLine')

const apiId = Number(process.env.TG_API_ID)
const apiHash = process.env.TG_API_HASH
const stringSession = new StringSession('')


async function startTgClient(bot, msg) {
  try {
    const client = new TelegramClient(stringSession, apiId, apiHash, { connectionRetries: 5 })

    await bot.sendMessage(msg.chat.id,
      '–í–≤–µ–¥—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
      { parse_mode: 'HTML' })

    const inputLine = await inputLineScene(bot, msg)
    console.log('Input code:', inputLine)
    if (!inputLine || isNaN(inputLine)) {
      throw new Error('Received code is empty or not a number')
    }

    console.log('Parsed code:', inputLine)

    await client.start({
      phoneNumber: process.env.TG_NUMBER,
      phoneCode: async () => inputLine,
      onError: (err) => console.log(err),
    })

    console.log('Session string:', client.session.save())
    return client
  } catch (err) {
    console.error('Error in startTgClient:', err.message)
  }
}


// async function getContacts(phone_number) {
//   const result = await client.invoke({
//     _: 'contacts.importContacts',
//     contacts: [
//       { _: 'inputPhoneContact', client_id: 0, phone: phone_number }     //, first_name: '–ò–º—è', last_name: '–§–∞–º–∏–ª–∏—è' }
//     ],
//   })

//   console.log(result)
//   return result
// }

// const userId = result.users[0].id
// await client.sendMessage(userId, { message: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' })

// console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


async function contactScene(bot, msg) {
  try {
    const chatId = msg.chat.id
    const tgClient = await startTgClient(bot, msg)

    const abonent_phone_number = msg.text
    // const abonent = await getContacts(tgClient, abonent_phone_number)
    // console.log(abonent)
    // await bot.sendMessage(chatId, "üéôÔ∏è <i> –ó–∞–ª–∏—à—Ç–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–ª—É–∂–±–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n –ü—Ä–æ—Ö–∞–Ω–Ω—è –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ —è–∫ –Ω–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –∑ –í–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å</i>", { parse_mode: "HTML" })
    // await bot.sendMessage(chatId, "üéôÔ∏è ")

  } catch (err) {
    console.error('Error in speechScene:', err)
    // await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
  }
}

module.exports = contactScene
